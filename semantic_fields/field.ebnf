@@grammar::field

(* If a field starts with an hte code it can be optionally followed by
branches. If it does not start with an hte code, then it **must** have
branches. *)

field = ( hte:hte_code [ branches:branches ] | branches:branches )
      [ specification:specification ] $;

branches = { branch }+;

(* This grammar is not meant to fully validate the format of HTE
   codes. 001.001aj is valid, even though there is no code in the HTE
   database that matches this code. *)

hte_code = levels:levels [ '|' subcats:subcats ] pos:pos;

levels = @+:level { level_separator @+:level }*;

subcats = @+:subcat { level_separator @+:subcat }*;

branch = branch_off [ '{' uri:uri '}' ] levels:levels [ pos:pos ];

specification = specify @:field;

level = /[0-9]+/;
subcat = /[0-9]+/;

(* Tatsu is a PEG parser, which means that the choice operator is
   ordered. If a valid value V for pos is prefix of another valid
   value X, V must appear after X. Otherwise, tatsu will select V as
   the choice and the trailing character will cause a parsing
   failure. (e.g. If 'v' appears before 'vi' and tatsu tries to parse
   'vi', then it will select 'v' as the choice and the trailing 'i'
   will then generate a parsing error. *)

pos = 'aj' | 'av' | 'cj' | 'in' | 'n' | 'ph' | 'p' | 'vi' | 'vm' |
    'vp' | 'vr' | 'vt' | 'v';


uri = /[^}]+/;
branch_off = '/';
specify = '@';
level_separator = '.';
