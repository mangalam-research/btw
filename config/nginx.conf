worker_processes auto;
pid @TMPDIR@/var/run/nginx.pid;
error_log stderr;

events {
        worker_connections 768;
        multi_accept on;
}

http {

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_requests 1000;
    types_hash_max_size 2048;
    client_body_temp_path @TMPDIR@/var/lib/nginx/body;
    proxy_temp_path @TMPDIR@/var/lib/nginx/proxy;
    fastcgi_temp_path @TMPDIR@/var/lib/nginx/fastcgi;
    uwsgi_temp_path @TMPDIR@/var/lib/nginx/uwsgi;
    scgi_temp_path @TMPDIR@/var/lib/nginx/scgi;

    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    gzip on;
    gzip_types *;
    gzip_vary on;
    gzip_proxied any;
    gzip_min_length 1000;

    # log_format custom '$remote_addr - $remote_user [$time_local] '
    #                  '"$request" $status $body_bytes_sent '
    #                  '"$http_referer" "$http_user_agent" $limit_rate';

    upstream django {
        server localhost:@SERVER_PORT@;
    }

    server {
        listen @PORT@;

        error_log @TMPDIR@/var/log/error.log;
        access_log @TMPDIR@/var/log/access.log combined buffer=64k;

        server_name btw.test;

        # This helps prevent clickjacking attacks.
        add_header X-Frame-Options SAMEORIGIN;

        # Prevents ignoring the Content-Type field by sniffing the data
        # returned.
        add_header X-Content-Type-Options nosniff;

        # XSS protection
        add_header X-XSS-Protection "1; mode=block";

        # This prevents MITM attacks that would try downgrading the
        # SSL.  It should be increased to max-age=31536000 once we are
        # satisfied it works.
        add_header Strict-Transport-Security "max-age=3600";

        # location / {
        #     # This is a bit of a hack to simulate network slowdowns.
        #     # Ideally we'd tweak nginx's state by getting special URLs
        #     # but variables do not persist from request to request. Or we could
        #     # set a cookie but the machinery necessary for that would
        #     # be more complex.
        #     if (-f @PWD@/sitestatic/LIMIT) {
        #        set $limit_rate 1k;
        #     }
        #     proxy_pass http://django/;
        #     proxy_redirect default;
        #     proxy_set_header Host            $http_host;
        #     proxy_set_header X-Forwarded-For $remote_addr;
        # }

        location / {
            # This is a bit of a hack to simulate network slowdowns.
            # Ideally we'd tweak nginx's state by getting special URLs
            # but variables do not persist from request to request. Or we could
            # set a cookie but the machinery necessary for that would
            # be more complex.
            if (-f @PWD@/sitestatic/LIMIT) {
               echo_sleep 1;
               # We need echo_exec here too, otherwise, no response...
               echo_exec /proxy$request_uri;
            }

            echo_exec /proxy$request_uri;
        }

        location /proxy/ {
            internal; # Don't accept requests from outside.
            proxy_pass http://django/;
            proxy_set_header Host            $http_host;
            proxy_set_header X-Forwarded-For $remote_addr;
        }

        # BTW's code uses this to check connectivity. We respond here
        # rather than have the Django app have to handle the request.
        location /ping {
            add_header Content-Type text/plain;
            return 200 'pong';
        }

        location /static {
            alias @PWD@/sitestatic;
            expires max;
            add_header Cache-Control private;
        }

    }
}
