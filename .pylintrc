[MASTER]
extension-pkg-whitelist=lxml

[MESSAGES CONTROL]
#
# - E1101 is the check that verifies whether object members exist. When using
# Django this check yields too many false positives.
#
# - E1103 is like E1101.
#
# - W0232 also yields too many false positives with Django.
#
# - W0142: Used * or ** magic
#
# - pointless-string-statement is raised for the documentation of object
# attributes because the string appears after the attribute.
#
# - catching-non-exception is raised because some Django exceptions are
# created like this:
#
# class Error(Exception if six.PY3 else StandardError):
#     pass
#
# And it confuses pylint.
#
# - no-value-for-parameter is raised erroneously, see:
#
# https://bitbucket.org/logilab/pylint/issue/222/having-trouble-linting-schematics-models
#
# too-many-ancestors is regularly triggered by deriving from Django code.
#
# And reevaluate when new versions of pylint are released.

disable=W0613,W0232,E1101,E1103,W0142,missing-docstring,pointless-string-statement,catching-non-exception,no-value-for-parameter,too-many-ancestors,too-few-public-methods,missing-docstring,too-many-instance-attributes

[VARIABLES]
dummy-variables-rgx=_.*|dummy
variable-rgx=[a-z_][a-z0-9_]{0,30}$
attr-rgx=[a-z_][a-z0-9_]{0,30}$
argument-rgx=[a-z_][a-z0-9_]{0,30}$
function-rgx=[a-z_][a-z0-9_]{0,30}$

# pylint misidentifies constants
const-rgx=(([a-zA-Z_][a-zA-Z0-9_]{0,30})|(__.*__))$
